/**
 * HCM CHATBOT ADMIN DASHBOARD
 * Giao di·ªán qu·∫£n tr·ªã cho admin theo d√µi ng∆∞·ªùi d√πng v√† ho·∫°t ƒë·ªông h·ªá th·ªëng
 * LAST UPDATED: 2025-09-29 04:37:00 - Added detailed debugging for totalMessages
 */

class AdminDashboard {
    constructor() {
        console.log('üöÄ AdminDashboard constructor called - Script loaded successfully!');
        // ===== C·∫§U H√åNH API =====
        this.API_BASE = 'http://localhost:9000/api';

        // ===== STATE MANAGEMENT =====
        this.user = null;
        this.token = null;
        this.currentSection = 'dashboard';

        this.init();
    }

    /**
     * KH·ªûI T·∫†O DASHBOARD
     * Ki·ªÉm tra quy·ªÅn admin v√† setup giao di·ªán
     */
    async init() {
        // Ki·ªÉm tra authentication
        this.token = localStorage.getItem('token');
        const userStr = localStorage.getItem('user');

        if (!this.token || !userStr) {
            alert('Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ truy c·∫≠p trang n√†y!');
            window.location.href = 'auth.html';
            return;
        }

        try {
            this.user = JSON.parse(userStr);

            // Ki·ªÉm tra quy·ªÅn admin - b·∫Øt bu·ªôc ph·∫£i c√≥ role admin
            if (!this.user || this.user.role !== 'admin') {
                alert('B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p trang qu·∫£n tr·ªã!');
                localStorage.removeItem('token');
                localStorage.removeItem('user');
                window.location.href = 'auth.html';
                return;
            }

            // X√°c th·ª±c token v·ªõi server
            const validationResponse = await this.fetchWithAuth('/auth/me');
            if (!validationResponse || !validationResponse.ok) {
                alert('Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n!');
                this.logout();
                return;
            }

            this.setupUI();
            this.bindEvents();
            await this.loadDashboardData();
        } catch (error) {
            console.error('Init error:', error);
            alert('L·ªói kh·ªüi t·∫°o trang qu·∫£n tr·ªã. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.');
            this.logout();
        }
    }

    /**
     * SETUP GIAO DI·ªÜN
     */
    setupUI() {
        // Hi·ªÉn th·ªã t√™n admin
        document.getElementById('adminName').textContent = this.user.fullName || this.user.username;
    }

    /**
     * BIND EVENTS
     */
    bindEvents() {
        // Navigation events
        document.querySelectorAll('.nav-link').forEach(link => {
            link.addEventListener('click', (e) => {
                e.preventDefault();
                const section = e.target.closest('.nav-link').dataset.section;
                this.showSection(section);
            });
        });
    }

    /**
     * HI·ªÇN TH·ªä SECTION
     */
    async showSection(sectionName) {
        // Update active nav
        document.querySelectorAll('.nav-link').forEach(link => {
            link.classList.remove('active');
        });
        document.querySelector(`[data-section="${sectionName}"]`).classList.add('active');

        // Hide all sections
        document.querySelectorAll('.content-section').forEach(section => {
            section.style.display = 'none';
        });

        // Show target section
        document.getElementById(`${sectionName}-section`).style.display = 'block';
        this.currentSection = sectionName;

        // Load section data
        switch (sectionName) {
            case 'dashboard':
                await this.loadDashboardData();
                break;
            case 'users':
                await this.loadUsers();
                break;
            case 'conversations':
                await this.loadConversations();
                break;
            case 'messages':
                await this.loadMessages();
                break;
            case 'profile':
                await this.loadProfile();
                break;
        }
    }

    /**
     * T·∫¢I D·ªÆ LI·ªÜU DASHBOARD
     */
    async loadDashboardData() {
        try {
            // Load basic stats
            const response = await this.fetchWithAuth('/dashboard/stats');
            if (response && response.ok) {
                const data = await response.json();
                const stats = data.data;

                console.log('Dashboard stats API response:', data);
                console.log('Stats object:', stats);
                console.log('stats.totalMessages value:', stats.totalMessages);
                console.log('typeof stats.totalMessages:', typeof stats.totalMessages);

                // C·∫≠p nh·∫≠t th·ªëng k√™ c∆° b·∫£n
                document.getElementById('totalUsers').textContent = stats.totalUsers || 0;
                document.getElementById('totalConversations').textContent = stats.totalConversations || 0;

                // Detailed logging for totalMessages element
                const messagesElement = document.getElementById('totalMessages');
                console.log('totalMessages element found:', messagesElement);
                console.log('Current textContent before update:', messagesElement.textContent);
                messagesElement.textContent = stats.totalMessages || 0;
                console.log('textContent after update:', messagesElement.textContent);
                console.log('Final value set:', stats.totalMessages || 0);

                // AI responses = messages from assistant role
                const aiCount = Math.floor((stats.totalMessages || 0) / 2); // Estimate
                document.getElementById('aiResponses').textContent = aiCount;
            }

            // Load detailed chat statistics
            await this.loadDetailedChatStats();
        } catch (error) {
            console.error('Error loading dashboard:', error);
        }
    }

    /**
     * T·∫¢I TH·ªêNG K√ä CHAT CHI TI·∫æT
     */
    async loadDetailedChatStats() {
        try {
            // Load message stats
            const messageResponse = await this.fetchWithAuth('/dashboard/messages/stats');
            if (messageResponse && messageResponse.ok) {
                const messageData = await messageResponse.json();
                const messageStats = messageData.data;

                // C·∫≠p nh·∫≠t th·ªëng k√™ tin nh·∫Øn
                document.getElementById('messagesThisWeek').textContent = messageStats.thisWeekCount || 0;
                document.getElementById('avgMessagesPerConversation').textContent =
                    Math.round(messageStats.averagePerConversation || 0);
            }

            // Load user activity stats
            const userResponse = await this.fetchWithAuth('/dashboard/users/stats');
            if (userResponse && userResponse.ok) {
                const userData = await userResponse.json();
                const userStats = userData.data;

                // Estimate active users this week (users who sent messages)
                const activeThisWeek = Math.floor((userStats.activeCount || 0) * 0.3); // Estimate
                document.getElementById('activeUsersThisWeek').textContent = activeThisWeek;
            }

            // Load recent messages to calculate average confidence
            const recentMessagesResponse = await this.fetchWithAuth('/dashboard/messages');
            if (recentMessagesResponse && recentMessagesResponse.ok) {
                const recentData = await recentMessagesResponse.json();
                const recentMessages = recentData.data || [];

                // Calculate average confidence score for AI messages
                const aiMessages = recentMessages.filter(msg => msg.role === 'assistant' && msg.confidenceScore);
                if (aiMessages.length > 0) {
                    const avgConfidence = aiMessages.reduce((sum, msg) => sum + (msg.confidenceScore || 0), 0) / aiMessages.length;
                    document.getElementById('avgConfidenceScore').textContent = Math.round(avgConfidence) + '%';
                } else {
                    document.getElementById('avgConfidenceScore').textContent = 'N/A';
                }
            }
        } catch (error) {
            console.error('Error loading detailed chat stats:', error);
            // Set default values on error
            document.getElementById('messagesThisWeek').textContent = 'N/A';
            document.getElementById('avgMessagesPerConversation').textContent = 'N/A';
            document.getElementById('activeUsersThisWeek').textContent = 'N/A';
            document.getElementById('avgConfidenceScore').textContent = 'N/A';
        }
    }

    /**
     * T·∫¢I DANH S√ÅCH NG∆Ø·ªúI D√ôNG
     */
    async loadUsers() {
        const container = document.getElementById('usersContent');

        try {
            const response = await this.fetchWithAuth('/dashboard/users');
            if (response.ok) {
                const data = await response.json();
                const users = data.data || [];

                if (users.length === 0) {
                    container.innerHTML = '<p style="text-align: center; padding: 20px; color: #666;">Kh√¥ng c√≥ d·ªØ li·ªáu ng∆∞·ªùi d√πng</p>';
                    return;
                }

                const tableHTML = `
                    <table class="data-table">
                        <thead>
                            <tr>
                                <th>T√™n ƒëƒÉng nh·∫≠p</th>
                                <th>Email</th>
                                <th>H·ªç t√™n</th>
                                <th>Vai tr√≤</th>
                                <th>Tr·∫°ng th√°i</th>
                                <th>S·ªë cu·ªôc tr√≤ chuy·ªán</th>
                                <th>S·ªë tin nh·∫Øn</th>
                                <th>Ng√†y t·∫°o</th>
                                <th>Thao t√°c</th>
                            </tr>
                        </thead>
                        <tbody>
                            ${users.map(user => `
                                <tr>
                                    <td>${user.username}</td>
                                    <td>${user.email}</td>
                                    <td>${user.fullName || ''}</td>
                                    <td><span style="padding: 4px 8px; border-radius: 4px; background: ${user.role === 'admin' ? '#f44336' : '#4CAF50'}; color: white; font-size: 0.8rem;">${user.role}</span></td>
                                    <td><span style="padding: 4px 8px; border-radius: 4px; background: ${user.status === 'enable' ? '#4CAF50' : '#f44336'}; color: white; font-size: 0.8rem;">${user.status === 'enable' ? 'Ho·∫°t ƒë·ªông' : 'B·ªã kh√≥a'}</span></td>
                                    <td>${user.totalConversations}</td>
                                    <td>${user.totalMessages}</td>
                                    <td>${this.formatDate(user.createdAt)}</td>
                                    <td>
                                        <div style="display: flex; gap: 5px; flex-wrap: wrap;">
                                            ${user.role !== 'admin' ? `
                                                <button onclick="adminDashboard.toggleUserStatus('${user.id}', '${user.status}')"
                                                        style="padding: 4px 8px; border: none; border-radius: 4px; cursor: pointer; font-size: 0.8rem; background: ${user.status === 'enable' ? '#f44336' : '#4CAF50'}; color: white;">
                                                    ${user.status === 'enable' ? 'Kh√≥a' : 'M·ªü kh√≥a'}
                                                </button>
                                                <button onclick="adminDashboard.promoteUser('${user.id}')"
                                                        style="padding: 4px 8px; border: none; border-radius: 4px; cursor: pointer; font-size: 0.8rem; background: #FF9800; color: white;">
                                                    Ph√¢n quy·ªÅn Admin
                                                </button>
                                            ` : '<span style="color: #666; font-size: 0.8rem;">Admin ch√≠nh</span>'}
                                        </div>
                                    </td>
                                </tr>
                            `).join('')}
                        </tbody>
                    </table>
                `;

                container.innerHTML = tableHTML;
            } else {
                container.innerHTML = '<p style="text-align: center; padding: 20px; color: #666;">L·ªói t·∫£i d·ªØ li·ªáu ng∆∞·ªùi d√πng</p>';
            }
        } catch (error) {
            console.error('Error loading users:', error);
            container.innerHTML = '<p style="text-align: center; padding: 20px; color: #666;">L·ªói k·∫øt n·ªëi</p>';
        }
    }

    /**
     * T·∫¢I DANH S√ÅCH CU·ªòC TR√í CHUY·ªÜN
     */
    async loadConversations() {
        const container = document.getElementById('conversationsContent');

        try {
            const response = await this.fetchWithAuth('/dashboard/conversations');
            if (response.ok) {
                const data = await response.json();
                const conversations = data.data || [];

                if (conversations.length === 0) {
                    container.innerHTML = '<p style="text-align: center; padding: 20px; color: #666;">Kh√¥ng c√≥ cu·ªôc tr√≤ chuy·ªán</p>';
                    return;
                }

                const tableHTML = `
                    <table class="data-table">
                        <thead>
                            <tr>
                                <th>Ti√™u ƒë·ªÅ</th>
                                <th>Ng∆∞·ªùi d√πng</th>
                                <th>S·ªë tin nh·∫Øn</th>
                                <th>Ng√†y t·∫°o</th>
                                <th>C·∫≠p nh·∫≠t cu·ªëi</th>
                            </tr>
                        </thead>
                        <tbody>
                            ${conversations.map(conv => `
                                <tr>
                                    <td>${conv.title}</td>
                                    <td>${conv.username || 'N/A'}</td>
                                    <td>${conv.messageCount}</td>
                                    <td>${this.formatDate(conv.createdAt)}</td>
                                    <td>${this.formatDate(conv.updatedAt)}</td>
                                </tr>
                            `).join('')}
                        </tbody>
                    </table>
                `;

                container.innerHTML = tableHTML;
            } else {
                container.innerHTML = '<p style="text-align: center; padding: 20px; color: #666;">L·ªói t·∫£i d·ªØ li·ªáu cu·ªôc tr√≤ chuy·ªán</p>';
            }
        } catch (error) {
            console.error('Error loading conversations:', error);
            container.innerHTML = '<p style="text-align: center; padding: 20px; color: #666;">L·ªói k·∫øt n·ªëi</p>';
        }
    }

    /**
     * T·∫¢I DANH S√ÅCH TIN NH·∫ÆN
     */
    async loadMessages() {
        const container = document.getElementById('messagesContent');

        try {
            const response = await this.fetchWithAuth('/dashboard/messages');
            if (response.ok) {
                const data = await response.json();
                const messages = data.data || [];

                console.log('Messages API response:', data);
                console.log('Messages array length:', messages.length);

                if (messages.length === 0) {
                    container.innerHTML = '<p style="text-align: center; padding: 20px; color: #666;">Kh√¥ng c√≥ tin nh·∫Øn</p>';
                    return;
                }

                const tableHTML = `
                    <table class="data-table">
                        <thead>
                            <tr>
                                <th>N·ªôi dung</th>
                                <th>Vai tr√≤</th>
                                <th>Ng∆∞·ªùi d√πng</th>
                                <th>ƒê·ªô tin c·∫≠y</th>
                                <th>Th·ªùi gian</th>
                            </tr>
                        </thead>
                        <tbody>
                            ${messages.map(msg => `
                                <tr>
                                    <td style="max-width: 300px; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;">${msg.content}</td>
                                    <td><span style="padding: 4px 8px; border-radius: 4px; background: ${msg.role === 'user' ? '#2196F3' : '#FF9800'}; color: white; font-size: 0.8rem;">${msg.role}</span></td>
                                    <td>${msg.username || 'N/A'}</td>
                                    <td>${msg.confidenceScore ? msg.confidenceScore + '%' : 'N/A'}</td>
                                    <td>${this.formatDate(msg.createdAt)}</td>
                                </tr>
                            `).join('')}
                        </tbody>
                    </table>
                `;

                container.innerHTML = tableHTML;
            } else {
                console.error('Messages API response not ok:', response.status, response.statusText);
                container.innerHTML = '<p style="text-align: center; padding: 20px; color: #666;">L·ªói t·∫£i d·ªØ li·ªáu tin nh·∫Øn: ' + response.status + '</p>';
            }
        } catch (error) {
            console.error('Error loading messages:', error);
            container.innerHTML = '<p style="text-align: center; padding: 20px; color: #666;">L·ªói k·∫øt n·ªëi: ' + error.message + '</p>';
        }
    }

    /**
     * FETCH V·ªöI AUTHENTICATION
     * T·ª± ƒë·ªông x·ª≠ l√Ω l·ªói 401 v√† l√†m m·ªõi token n·∫øu c·∫ßn
     */
    async fetchWithAuth(endpoint, options = {}) {
        try {
            const url = this.API_BASE + endpoint;
            const headers = {
                'Authorization': `Bearer ${this.token}`,
                'Content-Type': 'application/json',
                ...options.headers
            };

            const response = await fetch(url, {
                ...options,
                headers
            });

            // X·ª≠ l√Ω l·ªói authorization
            if (response.status === 401) {
                alert('Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.');
                this.logout();
                return null;
            }

            // X·ª≠ l√Ω l·ªói forbidden (kh√¥ng c√≥ quy·ªÅn)
            if (response.status === 403) {
                alert('B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán thao t√°c n√†y.');
                return null;
            }

            return response;
        } catch (error) {
            console.error('Network error:', error);
            alert('L·ªói k·∫øt n·ªëi m·∫°ng. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi internet.');
            return null;
        }
    }

    /**
     * KI·ªÇM TRA QUY·ªÄN ADMIN
     * H√†m b·∫£o v·ªá ƒë·ªÉ ƒë·∫£m b·∫£o ch·ªâ admin m·ªõi truy c·∫≠p ƒë∆∞·ª£c
     */
    static validateAdminAccess() {
        const token = localStorage.getItem('token');
        const userStr = localStorage.getItem('user');

        if (!token || !userStr) {
            window.location.href = 'auth.html';
            return false;
        }

        try {
            const user = JSON.parse(userStr);
            if (!user || user.role !== 'admin') {
                alert('Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p trang qu·∫£n tr·ªã!');
                localStorage.clear();
                window.location.href = 'auth.html';
                return false;
            }
            return true;
        } catch (error) {
            console.error('User data validation error:', error);
            localStorage.clear();
            window.location.href = 'auth.html';
            return false;
        }
    }

    /**
     * ƒêƒÇNG XU·∫§T
     */
    logout() {
        localStorage.removeItem('token');
        localStorage.removeItem('user');
        window.location.href = 'auth.html';
    }

    /**
     * CHUY·ªÇN ƒê·ªîI TR·∫†NG TH√ÅI NG∆Ø·ªúI D√ôNG (KH√ìA/M·ªû KH√ìA)
     */
    async toggleUserStatus(userId, currentStatus) {
        const newStatus = currentStatus === 'enable' ? 'disable' : 'enable';
        const actionText = newStatus === 'enable' ? 'm·ªü kh√≥a' : 'kh√≥a';

        if (!confirm(`B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ${actionText} ng∆∞·ªùi d√πng n√†y?`)) {
            return;
        }

        try {
            const response = await this.fetchWithAuth(`/dashboard/users/${userId}/status`, {
                method: 'PUT',
                body: JSON.stringify({ status: newStatus })
            });

            if (response && response.ok) {
                alert(`${actionText.charAt(0).toUpperCase() + actionText.slice(1)} ng∆∞·ªùi d√πng th√†nh c√¥ng!`);
                await this.loadUsers(); // Reload user list
            } else {
                const errorData = await response?.json();
                alert(`L·ªói ${actionText} ng∆∞·ªùi d√πng: ${errorData?.message || 'Kh√¥ng x√°c ƒë·ªãnh'}`);
            }
        } catch (error) {
            console.error('Error toggling user status:', error);
            alert(`L·ªói ${actionText} ng∆∞·ªùi d√πng. Vui l√≤ng th·ª≠ l·∫°i.`);
        }
    }

    /**
     * PH√ÇN QUY·ªÄN ADMIN CHO NG∆Ø·ªúI D√ôNG
     */
    async promoteUser(userId) {
        if (!confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ph√¢n quy·ªÅn admin cho ng∆∞·ªùi d√πng n√†y?')) {
            return;
        }

        try {
            const response = await this.fetchWithAuth(`/dashboard/users/${userId}/role`, {
                method: 'PUT',
                body: JSON.stringify({ role: 'admin' })
            });

            if (response && response.ok) {
                alert('Ph√¢n quy·ªÅn admin th√†nh c√¥ng!');
                await this.loadUsers(); // Reload user list
            } else {
                const errorData = await response?.json();
                alert(`L·ªói ph√¢n quy·ªÅn: ${errorData?.message || 'Kh√¥ng x√°c ƒë·ªãnh'}`);
            }
        } catch (error) {
            console.error('Error promoting user:', error);
            alert('L·ªói ph√¢n quy·ªÅn admin. Vui l√≤ng th·ª≠ l·∫°i.');
        }
    }

    /**
     * X√ìA NG∆Ø·ªúI D√ôNG (ADMIN ONLY)
     */
    async deleteUser(userId, username) {
        const confirmText = `X√≥a ng∆∞·ªùi d√πng "${username}"? Thao t√°c n√†y kh√¥ng th·ªÉ ho√†n t√°c!`;
        if (!confirm(confirmText)) {
            return;
        }

        // Double confirmation for deletion
        const doubleConfirm = prompt('Nh·∫≠p "XOA" ƒë·ªÉ x√°c nh·∫≠n x√≥a ng∆∞·ªùi d√πng:', '');
        if (doubleConfirm !== 'XOA') {
            alert('H·ªßy thao t√°c x√≥a ng∆∞·ªùi d√πng.');
            return;
        }

        try {
            const response = await this.fetchWithAuth(`/dashboard/users/${userId}`, {
                method: 'DELETE'
            });

            if (response && response.ok) {
                alert('X√≥a ng∆∞·ªùi d√πng th√†nh c√¥ng!');
                await this.loadUsers(); // Reload user list
            } else {
                const errorData = await response?.json();
                alert(`L·ªói x√≥a ng∆∞·ªùi d√πng: ${errorData?.message || 'Kh√¥ng x√°c ƒë·ªãnh'}`);
            }
        } catch (error) {
            console.error('Error deleting user:', error);
            alert('L·ªói x√≥a ng∆∞·ªùi d√πng. Vui l√≤ng th·ª≠ l·∫°i.');
        }
    }

    /**
     * T·∫¢I PROFILE ADMIN
     */
    async loadProfile() {
        try {
            // ƒêi·ªÅn th√¥ng tin t·ª´ localStorage
            document.getElementById('profileUsername').value = this.user.username || '';
            document.getElementById('profileEmail').value = this.user.email || '';
            document.getElementById('profileFullName').value = this.user.fullName || '';

            console.log('Profile loaded for admin:', this.user.username);
        } catch (error) {
            console.error('Error loading profile:', error);
        }
    }

    /**
     * C·∫¨P NH·∫¨T PROFILE
     */
    async updateProfile() {
        try {
            const email = document.getElementById('profileEmail').value.trim();
            const fullName = document.getElementById('profileFullName').value.trim();

            if (!email) {
                alert('Vui l√≤ng nh·∫≠p email!');
                return;
            }

            const response = await this.fetchWithAuth(`/auth/profile`, {
                method: 'PUT',
                body: JSON.stringify({
                    email: email,
                    fullName: fullName
                })
            });

            if (response && response.ok) {
                const data = await response.json();
                if (data.success) {
                    // C·∫≠p nh·∫≠t localStorage
                    this.user.email = email;
                    this.user.fullName = fullName;
                    localStorage.setItem('user', JSON.stringify(this.user));

                    // C·∫≠p nh·∫≠t hi·ªÉn th·ªã t√™n
                    document.getElementById('adminName').textContent = fullName || this.user.username;

                    alert('C·∫≠p nh·∫≠t profile th√†nh c√¥ng!');
                } else {
                    alert('L·ªói c·∫≠p nh·∫≠t profile: ' + (data.message || 'Kh√¥ng x√°c ƒë·ªãnh'));
                }
            } else {
                alert('L·ªói k·∫øt n·ªëi server khi c·∫≠p nh·∫≠t profile');
            }
        } catch (error) {
            console.error('Error updating profile:', error);
            alert('L·ªói c·∫≠p nh·∫≠t profile: ' + error.message);
        }
    }

    /**
     * ƒê·ªîI M·∫¨T KH·∫®U
     */
    async changePassword() {
        try {
            const currentPassword = document.getElementById('currentPassword').value;
            const newPassword = document.getElementById('newPassword').value;
            const confirmPassword = document.getElementById('confirmPassword').value;

            // Validation
            if (!currentPassword || !newPassword || !confirmPassword) {
                alert('Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin m·∫≠t kh·∫©u!');
                return;
            }

            if (newPassword !== confirmPassword) {
                alert('M·∫≠t kh·∫©u m·ªõi v√† x√°c nh·∫≠n m·∫≠t kh·∫©u kh√¥ng kh·ªõp!');
                return;
            }

            if (newPassword.length < 6) {
                alert('M·∫≠t kh·∫©u m·ªõi ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±!');
                return;
            }

            const response = await this.fetchWithAuth(`/auth/change-password`, {
                method: 'POST',
                body: JSON.stringify({
                    currentPassword: currentPassword,
                    newPassword: newPassword
                })
            });

            if (response && response.ok) {
                const data = await response.json();
                if (data.success) {
                    alert('ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng!');
                    // Clear password fields
                    document.getElementById('currentPassword').value = '';
                    document.getElementById('newPassword').value = '';
                    document.getElementById('confirmPassword').value = '';
                } else {
                    alert('L·ªói ƒë·ªïi m·∫≠t kh·∫©u: ' + (data.message || 'Kh√¥ng x√°c ƒë·ªãnh'));
                }
            } else {
                alert('L·ªói k·∫øt n·ªëi server khi ƒë·ªïi m·∫≠t kh·∫©u');
            }
        } catch (error) {
            console.error('Error changing password:', error);
            alert('L·ªói ƒë·ªïi m·∫≠t kh·∫©u: ' + error.message);
        }
    }

    /**
     * FORMAT NG√ÄY TH√ÅNG
     */
    formatDate(dateString) {
        const date = new Date(dateString);
        return date.toLocaleString('vi-VN');
    }
}

// ===== GLOBAL FUNCTIONS =====
function logout() {
    adminDashboard.logout();
}

// ===== KI·ªÇM TRA QUY·ªÄN TRUY C·∫¨P NGAY KHI T·∫¢I TRANG =====
// B·∫£o v·ªá trang admin ngay t·ª´ ƒë·∫ßu, kh√¥ng ch·ªù DOM load
(function() {
    if (!AdminDashboard.validateAdminAccess()) {
        return; // ƒê√£ redirect trong validateAdminAccess
    }
})();

// ===== KH·ªûI T·∫†O ·ª®NG D·ª§NG =====
let adminDashboard;
document.addEventListener('DOMContentLoaded', () => {
    // Ki·ªÉm tra l·∫°i quy·ªÅn truy c·∫≠p tr∆∞·ªõc khi kh·ªüi t·∫°o dashboard
    if (AdminDashboard.validateAdminAccess()) {
        adminDashboard = new AdminDashboard();
    }
});