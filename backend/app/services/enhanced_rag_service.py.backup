import google.generativeai as genai
from .vector_store import SimpleVectorStore
from .web_data_collector import WebDataCollector
import os
from dotenv import load_dotenv
import json
from datetime import datetime
from typing import List

load_dotenv()

class EnhancedRAGService:
    def __init__(self):
        self.vector_store = SimpleVectorStore()
        self.data_collector = WebDataCollector()
        
        # Gemini setup
        genai.configure(api_key=os.getenv("GEMINI_API_KEY"))
        self.model = genai.GenerativeModel('gemini-1.5-flash')
        
        # Data freshness tracking
        self.last_update = None
        print("Enhanced RAG Service với web data collector sẵn sàng!")
    
    def update_knowledge_base(self, force_update=False):
        """Cập nhật knowledge base từ web sources"""
        
        # Check if update needed
        if not force_update and self.vector_store.get_collection_count() >= 15:
            print("Knowledge base đã có đủ dữ liệu, bỏ qua web update")
            return
        
        print("Đang thu thập dữ liệu từ các nguồn uy tín...")
        
        # Collect web data
        try:
            web_results = self.data_collector.collect_hcm_content([])
            
            if web_results:
                # Convert to vector store format
                texts = []
                metadatas = []
                
                for result in web_results:
                    # Split long content into chunks
                    chunks = self.split_text(result['content'])
                    
                    for i, chunk in enumerate(chunks):
                        if len(chunk.strip()) > 50:  # Only meaningful chunks
                            texts.append(chunk)
                            metadatas.append({
                                'source': result['title'] if result['title'] else result['url'],
                                'url': result['url'],
                                'credibility_score': result['credibility_score'],
                                'source_type': result['source_type'],
                                'chunk_index': i,
                                'collected_date': datetime.now().isoformat()
                            })
                
                # Add to vector store
                if texts:
                    self.vector_store.add_documents(texts, metadatas)
                    self.last_update = datetime.now()
                    print(f"Đã thêm {len(texts)} documents từ {len(web_results)} nguồn web")
                else:
                    print("Không có content chất lượng, dùng dữ liệu backup")
                    self.add_fallback_documents()
            else:
                print("Không thu thập được web data, dùng dữ liệu backup")
                self.add_fallback_documents()
                
        except Exception as e:
            print(f"Lỗi thu thập web data: {e}")
            self.add_fallback_documents()
    
    def split_text(self, text: str, max_length: int = 500) -> List[str]:
        """Split text thành chunks nhỏ"""
        sentences = text.split('. ')
        chunks = []
        current_chunk = ""
        
        for sentence in sentences:
            if len(current_chunk + sentence) < max_length:
                current_chunk += sentence + ". "
            else:
                if current_chunk:
                    chunks.append(current_chunk.strip())
                current_chunk = sentence + ". "
        
        if current_chunk:
            chunks.append(current_chunk.strip())
        
        return chunks
    
    def add_fallback_documents(self):
        """Add hardcoded reliable documents as fallback"""
        fallback_docs = [
            "Độc lập là quyền thiêng liêng bất khả xâm phạm của mọi dân tộc trên thế giới. Tất cả mọi người đều sinh ra có quyền bình đẳng. (Tuyên ngôn độc lập, 2/9/1945)",
            "Đạo đức cách mạng không phải là từ trời rơi xuống. Nó do đấu tranh và giáo dục hằng ngày mà có. (Toàn tập HCM, tập 5)",
            "Yêu nước là truyền thống tốt đẹp của dân tộc ta từ ngàn xưa. Muốn nước độc lập thì phải có lòng yêu nước. (Toàn tập HCM, tập 8)",
            "Dân là gốc, có gốc vững thì nước mới êm. Dân ta phải thực sự là chủ của nước ta. (Toàn tập HCM, tập 12)",
            "Học, học nữa, học mãi để trở thành con người có đức, có tài, xứng đáng với thời đại Hồ Chí Minh. (Toàn tập HCM, tập 4)",
            "Đoàn kết là sức mạnh vô địch của nhân dân ta. Có đoàn kết thì ta thắng lợi, không đoàn kết thì ta thất bại. (Toàn tập HCM, tập 15)",
            "Cần kiệm liêm chính, chí công vô tư là phẩm chất của người cách mạng. (Toàn tập HCM, tập 7)",
            "Tự lực cánh sinh là chủ trương đúng đắn của ta. Phải dựa vào sức mình làm chủ vận mệnh của mình. (Toàn tập HCM, tập 6)",
            "Muốn xây dựng chủ nghĩa xã hội, trước hết phải có con người xã hội chủ nghĩa. (Toàn tập HCM, tập 10)",
            "Cách mạng là sự nghiệp của quần chúng, không phải của một người hay một nhóm người. (Toàn tập HCM, tập 3)"
        ]
        
        fallback_metadata = [
            {"source": "Tuyên ngôn độc lập 2/9/1945", "credibility_score": 100, "source_type": "primary"},
            {"source": "Toàn tập HCM, tập 5 (Về đạo đức)", "credibility_score": 100, "source_type": "official"},
            {"source": "Toàn tập HCM, tập 8 (Về yêu nước)", "credibility_score": 100, "source_type": "official"},
            {"source": "Toàn tập HCM, tập 12 (Về dân chủ)", "credibility_score": 100, "source_type": "official"},
            {"source": "Toàn tập HCM, tập 4 (Về giáo dục)", "credibility_score": 100, "source_type": "official"},
            {"source": "Toàn tập HCM, tập 15 (Về đoàn kết)", "credibility_score": 100, "source_type": "official"},
            {"source": "Toàn tập HCM, tập 7 (Về đạo đức)", "credibility_score": 100, "source_type": "official"},
            {"source": "Toàn tập HCM, tập 6 (Về kinh tế)", "credibility_score": 100, "source_type": "official"},
            {"source": "Toàn tập HCM, tập 10 (Về xây dựng)", "credibility_score": 100, "source_type": "official"},
            {"source": "Toàn tập HCM, tập 3 (Về cách mạng)", "credibility_score": 100, "source_type": "official"}
        ]
        
        self.vector_store.add_documents(fallback_docs, fallback_metadata)
        print(f"Đã thêm {len(fallback_docs)} documents backup chất lượng cao")
    
    def generate_response_with_sources(self, question: str):
        """Generate response với source citation"""
        try:
            # Search relevant documents
            search_results = self.vector_store.search(question, n_results=3)
            
            if not search_results['documents'][0]:
                return {
                    "answer": "Xin lỗi, tôi không tìm thấy thông tin liên quan trong cơ sở tri thức về tư tưởng Hồ Chí Minh.",
                    "sources": [],
                    "confidence": 0
                }
            
            # Prepare context with source info
            context_docs = search_results['documents'][0]
            source_metadatas = search_results['metadatas'][0]
            
            context = ""
            sources_used = []
            
            for i, (doc, metadata) in enumerate(zip(context_docs[:3], source_metadatas[:3])):
                context += f"[Nguồn {i+1}]: {doc}\n"
                sources_used.append({
                    "source": metadata.get('source', 'Unknown'),
                    "credibility": metadata.get('credibility_score', 0),
                    "type": metadata.get('source_type', 'unknown'),
                    "url": metadata.get('url', '')
                })
            
            # Generate response
            prompt = f"""Bạn là chuyên gia về tư tưởng Hồ Chí Minh. Trả lời câu hỏi dựa trên các tài liệu đáng tin cậy:

TÀI LIỆU THAM KHẢO:
{context}

CÂUHỎI: {question}

YÊU CẦU:
- Trả lời chính xác dựa trên tài liệu được cung cấp
- Có thể trích dẫn "[Nguồn X]" khi cần
- Nếu không chắc chắn, hãy thành thật nói không biết
- Trả lời ngắn gọn, tối đa 3 đoạn văn
- Giải thích ý nghĩa sâu sắc của tư tưởng

TRẢ LỜI:"""

            response = self.model.generate_content(prompt)
            
            # Calculate confidence based on source quality
            avg_credibility = sum(s['credibility'] for s in sources_used) / len(sources_used) if sources_used else 0
            
            return {
                "answer": response.text,
                "sources": sources_used,
                "confidence": int(avg_credibility),
                "last_updated": self.last_update.isoformat() if self.last_update else None
            }
            
        except Exception as e:
            return {
                "answer": f"Xin lỗi, có lỗi xảy ra khi xử lý câu hỏi. Vui lòng thử lại sau.",
                "sources": [],
                "confidence": 0
            }
    
    def get_stats(self):
        """Get system stats"""
        return {
            "total_documents": self.vector_store.get_collection_count(),
            "last_update": self.last_update.isoformat() if self.last_update else None,
            "trusted_sources_count": len(self.data_collector.trusted_sources),
            "status": "ready"
        }
