"""
PYTHON AI BACKEND - HCM THOUGHT CHATBOT
S·ª≠ d·ª•ng FastAPI ƒë·ªÉ t·∫°o REST API cho AI chatbot
T√≠ch h·ª£p RAG (Retrieval-Augmented Generation) v·ªõi Gemini AI
"""

# Import c√°c th∆∞ vi·ªán c·∫ßn thi·∫øt
from fastapi import FastAPI, HTTPException
import os
from typing import List, Dict, Any, Optional
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from .services.enhanced_rag_service import EnhancedRAGService
from .services.quiz_service import QuizService
import google.generativeai as genai
import json
import requests

# ===== KH·ªûI T·∫†O FASTAPI APPLICATION =====
app = FastAPI(title="Enhanced HCM Thought Chatbot API", version="2.0.0")

# ===== C·∫§U H√åNH CORS =====
# Cho ph√©p .NET API (localhost:9000) g·ªçi Python API n√†y
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # Trong production n√™n gi·ªõi h·∫°n origins
    allow_credentials=True,
    allow_methods=["*"],  # Cho ph√©p t·∫•t c·∫£ HTTP methods
    allow_headers=["*"],  # Cho ph√©p t·∫•t c·∫£ headers
)

# ===== KH·ªûI T·∫†O AI SERVICE =====
# Enhanced RAG service - k·∫øt h·ª£p t√¨m ki·∫øm tri th·ª©c v√† t·∫°o vƒÉn b·∫£n
rag_service = EnhancedRAGService()
quiz_service = QuizService()

# ===== DATA MODELS CHO API =====

class QuestionRequest(BaseModel):
    """Model cho request t·ª´ .NET API"""
    question: str  # C√¢u h·ªèi t·ª´ ng∆∞·ªùi d√πng

class EnhancedChatResponse(BaseModel):
    """Model cho response tr·∫£ v·ªÅ .NET API"""
    answer: str  # C√¢u tr·∫£ l·ªùi t·ª´ AI
    confidence: int = 0  # ƒê·ªô tin c·∫≠y (0-100)
    last_updated: str = None  # Th·ªùi gian c·∫≠p nh·∫≠t knowledge base

# ===== QUIZ MODELS =====
class QuizGenerateRequest(BaseModel):
    chapter: str = "T·∫•t c·∫£"
    num_questions: int = 10
    difficulty: str = "medium"

class ImageSearchRequest(BaseModel):
    query: str
    num_results: int = 10

class QuizSubmitRequest(BaseModel):
    quiz_id: str
    username: str
    answers: Dict[str, str]  # {question_id: selected_answer}

class QuizResultResponse(BaseModel):
    """Response k·∫øt qu·∫£ b√†i l√†m"""
    score: float
    correct_count: int
    total_questions: int
    percentage: float
    details: List[Dict[str, Any]]

# ===== LIFECYCLE EVENTS =====

@app.on_event("startup")
async def startup_event():
    """
    Kh·ªüi t·∫°o knowledge base khi server start
    T·∫£i v√† x·ª≠ l√Ω t·∫•t c·∫£ t√†i li·ªáu v·ªÅ t∆∞ t∆∞·ªüng H·ªì Ch√≠ Minh
    """
    print("üöÄ Starting Enhanced HCM Chatbot API...")
    print("üìã Available endpoints:")
    for route in app.routes:
        if hasattr(route, 'methods') and hasattr(route, 'path'):
            print(f"  {list(route.methods)} {route.path}")
    
    try:
        rag_service.update_knowledge_base(force_update=True)
        print("‚úÖ Enhanced Server ready!")
    except Exception as e:
        print(f"‚ö†Ô∏è Warning: RAG service init failed: {e}")
        print("‚úÖ Server ready (RAG disabled)!")

# ===== API ENDPOINTS =====

@app.get("/")
async def root():
    """Root endpoint - th√¥ng tin c∆° b·∫£n v·ªÅ API"""
    return {"message": "Enhanced HCM Thought Chatbot API", "version": "2.0.0", "status": "running"}

@app.get("/health")
async def health_check():
    """Health check endpoint - ki·ªÉm tra t√¨nh tr·∫°ng AI service"""
    stats = rag_service.get_stats()
    return {"status": "healthy", "stats": stats}

# ===== ADMIN ENDPOINTS =====
@app.post("/admin/reindex")
async def admin_reindex():
    """Re-index l·∫°i to√†n b·ªô t√†i li·ªáu .md trong th∆∞ m·ª•c book/ (x√≥a index c≈© tr∆∞·ªõc)."""
    try:
        rag_service.update_knowledge_base(force_update=True)
        return {"status": "ok", "stats": rag_service.get_stats()}
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Reindex l·ªói: {e}")

@app.get("/admin/stats")
async def admin_stats():
    return rag_service.get_stats()

@app.post("/chat", response_model=EnhancedChatResponse)
async def enhanced_chat(request: QuestionRequest):
    """
    MAIN CHAT ENDPOINT - X·ª≠ l√Ω c√¢u h·ªèi v√† tr·∫£ v·ªÅ ph·∫£n h·ªìi AI

    Quy tr√¨nh:
    1. Validate input
    2. S·ª≠ d·ª•ng RAG service ƒë·ªÉ t√¨m ki·∫øm tri th·ª©c v√† t·∫°o c√¢u tr·∫£ l·ªùi
    3. N·∫øu RAG th·∫•t b·∫°i, fallback v·ªÅ Gemini tr·ª±c ti·∫øp
    4. Tr·∫£ v·ªÅ response v·ªõi sources v√† confidence score
    """
    try:
        # ===== VALIDATION =====
        if not request.question.strip():
            raise HTTPException(status_code=400, detail="C√¢u h·ªèi kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng")

        # ===== X·ª¨ L√ù V·ªöI RAG SERVICE =====
        try:
            # S·ª≠ d·ª•ng Enhanced RAG ƒë·ªÉ t·∫°o response v·ªõi ngu·ªìn tham kh·∫£o
            result = rag_service.generate_response_with_sources(request.question)

            return EnhancedChatResponse(
                answer=result["answer"],  # C√¢u tr·∫£ l·ªùi chi ti·∫øt
                sources=result["sources"],  # Ngu·ªìn tham kh·∫£o c√≥ c·∫•u tr√∫c
                confidence=result["confidence"],  # ƒê·ªô tin c·∫≠y
                last_updated=result.get("last_updated", "2024-01-01")
            )

        except Exception as rag_error:
            print(f"RAG service error: {rag_error}")

            # ===== FALLBACK: S·ª¨ D·ª§NG GEMINI TR·ª∞C TI·∫æP =====
            # Khi RAG service g·∫∑p l·ªói (th∆∞·ªùng do quota API), d√πng Gemini tr·ª±c ti·∫øp
            import google.generativeai as genai
            import os

            genai.configure(api_key=os.getenv("GEMINI_API_KEY"))
            model = genai.GenerativeModel('gemini-2.5-pro')

            # Prompt template cho fallback response
            prompt = f"""
            C√¢u h·ªèi v·ªÅ t∆∞ t∆∞·ªüng H·ªì Ch√≠ Minh: {request.question}

            H√£y tr·∫£ l·ªùi d·ª±a tr√™n ki·∫øn th·ª©c v·ªÅ t∆∞ t∆∞·ªüng H·ªì Ch√≠ Minh, bao g·ªìm:
            - ƒê·ªôc l·∫≠p d√¢n t·ªôc
            - Ch·ªß nghƒ©a x√£ h·ªôi
            - ƒê·∫°o ƒë·ª©c c√°ch m·∫°ng
            - D√¢n ch·ªß
            - ƒêo√†n k·∫øt d√¢n t·ªôc
            """

            response = model.generate_content(prompt)

            return EnhancedChatResponse(
                answer=response.text,
                sources=["Ki·∫øn th·ª©c chung v·ªÅ t∆∞ t∆∞·ªüng H·ªì Ch√≠ Minh"],  # Ngu·ªìn generic
                confidence=75,  # ƒê·ªô tin c·∫≠y th·∫•p h∆°n v√¨ kh√¥ng c√≥ RAG
                last_updated="2024-01-01"
            )

    except Exception as e:
        print(f"Error in enhanced chat endpoint: {e}")
        raise HTTPException(status_code=500, detail="L·ªói server, vui l√≤ng th·ª≠ l·∫°i")

# ===== BOOK ENDPOINTS =====
BOOK_DIR = os.path.abspath(os.path.join(os.path.dirname(__file__), "..", "data", "book"))

def _slug_to_title(slug: str) -> str:
    s = slug.lower()
    mapping = {
        'tu-tuong-ho-chi-minh': 'T∆∞ t∆∞·ªüng H·ªì Ch√≠ Minh',
        'muc-luc': 'M·ª•c l·ª•c',
        'chuong1': 'Ch∆∞∆°ng I',
        'chuong2': 'Ch∆∞∆°ng II',
        'chuong3': 'Ch∆∞∆°ng III',
        'chuong4': 'Ch∆∞∆°ng IV',
        'chuong5': 'Ch∆∞∆°ng V',
        'chuong6': 'Ch∆∞∆°ng VI',
        'chuong-1': 'Ch∆∞∆°ng I',
        'chuong-2': 'Ch∆∞∆°ng II',
        'chuong-3': 'Ch∆∞∆°ng III',
        'chuong-4': 'Ch∆∞∆°ng IV',
        'chuong-5': 'Ch∆∞∆°ng V',
        'chuong-6': 'Ch∆∞∆°ng VI',
    }
    if s in mapping:
        return mapping[s]
    name = slug.replace('-', ' ').title()
    return name

@app.get("/book/list")
async def list_book_pages():
    try:
        if not os.path.exists(BOOK_DIR):
            return []
        items: List[dict] = []
        for fn in os.listdir(BOOK_DIR):
            if not fn.lower().endswith('.md'):
                continue
            slug = os.path.splitext(fn)[0]
            items.append({
                "slug": slug,
                "title": _slug_to_title(slug)
            })
        # ∆Øu ti√™n s·∫Øp x·∫øp: tu-tuong-ho-chi-minh, muc-luc, chuong1..n, c√≤n l·∫°i theo t√™n
        def sort_key(x):
            s = x['slug'].lower()
            if s == 'tu-tuong-ho-chi-minh':
                return '00'
            if s == 'muc-luc':
                return '01'
            if s.startswith('chuong'):
                num = ''.join(ch for ch in s if ch.isdigit())
                if num:
                    try:
                        return f"02{int(num):02d}"
                    except Exception:
                        pass
            return '10' + x['title']
        items.sort(key=sort_key)
        return items
    except Exception as e:
        print(f"Book list error: {e}")
        raise HTTPException(status_code=500, detail="Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c danh s√°ch trang s√°ch")

@app.get("/book/content/{slug}")
async def get_book_content(slug: str):
    try:
        fp = os.path.join(BOOK_DIR, f"{slug}.md")
        if not os.path.exists(fp):
            raise HTTPException(status_code=404, detail="Kh√¥ng t√¨m th·∫•y trang s√°ch")
        with open(fp, 'r', encoding='utf-8') as f:
            md = f.read()
        return {
            "slug": slug,
            "title": _slug_to_title(slug),
            "markdown": md
        }
    except HTTPException:
        raise
    except Exception as e:
        print(f"Book content error: {e}")
        raise HTTPException(status_code=500, detail="Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c n·ªôi dung trang s√°ch")

# ===== QUIZ ENDPOINTS =====

@app.post("/quiz/generate")
async def generate_quiz(request: QuizGenerateRequest):
    """T·∫°o b·ªô c√¢u h·ªèi t·ª± ƒë·ªông d·ª±a tr√™n ch∆∞∆°ng"""
    print(f"üéØ Received quiz generate request: {request.chapter}, {request.num_questions} questions")
    try:
        print("üîß Step 1: Checking API key...")
        # C·∫•u h√¨nh Gemini
        api_key = os.getenv("GEMINI_API_KEY")
        if not api_key:
            print("‚ùå API key not found!")
            raise HTTPException(status_code=500, detail="Thi·∫øu GEMINI_API_KEY")
        
        print("üîß Step 2: Configuring Gemini...")
        genai.configure(api_key=api_key)
        model = genai.GenerativeModel('gemini-2.5-pro')
        
        print("üîß Step 3: Generating prompt...")
        
        # Prompt ƒë·ªÉ t·∫°o c√¢u h·ªèi
        prompt = f"""
        T·∫°o {request.num_questions} c√¢u h·ªèi tr·∫Øc nghi·ªám v·ªÅ t∆∞ t∆∞·ªüng H·ªì Ch√≠ Minh {request.chapter}.
        ƒê·ªô kh√≥: {request.difficulty}
        
        Y√™u c·∫ßu:
        1. M·ªói c√¢u h·ªèi c√≥ 4 ƒë√°p √°n A, B, C, D
        2. Ch·ªâ c√≥ 1 ƒë√°p √°n ƒë√∫ng
        3. C√¢u h·ªèi ph·∫£i r√µ r√†ng, ch√≠nh x√°c v·ªÅ m·∫∑t l√Ω lu·∫≠n
        4. K√®m gi·∫£i th√≠ch ng·∫Øn g·ªçn cho ƒë√°p √°n ƒë√∫ng
        
        Tr·∫£ v·ªÅ JSON v·ªõi format:
        {{
            "questions": [
                {{
                    "id": "q1",
                    "question": "C√¢u h·ªèi...",
                    "options": {{
                        "A": "ƒê√°p √°n A",
                        "B": "ƒê√°p √°n B", 
                        "C": "ƒê√°p √°n C",
                        "D": "ƒê√°p √°n D"
                    }},
                    "correct_answer": "A",
                    "explanation": "Gi·∫£i th√≠ch..."
                }}
            ]
        }}
        
        CH·ªà TR·∫¢ V·ªÄ JSON, KH√îNG C√ì TEXT KH√ÅC.
        """
        
        print("üîß Step 4: Calling Gemini API...")
        response = model.generate_content(prompt)
        print("üîß Step 5: Getting response text...")
        response_text = response.text
        print(f"üìù Response length: {len(response_text)} chars")
        
        # X·ª≠ l√Ω ƒë·ªÉ l·∫•y JSON
        if '```json' in response_text:
            response_text = response_text.split('```json')[1].split('```')[0]
        elif '```' in response_text:
            response_text = response_text.split('```')[1].split('```')[0]
        
        print("üîß Step 6: Parsing JSON...")
        # Parse JSON
        quiz_data = json.loads(response_text.strip())
        
        print("üîß Step 7: Adding metadata...")
        # Th√™m metadata
        quiz_data['title'] = f"B√†i ki·ªÉm tra {request.chapter}"
        quiz_data['chapter'] = request.chapter
        quiz_data['difficulty'] = request.difficulty
        quiz_data['num_questions'] = request.num_questions
        
        print("üîß Step 8: Saving quiz...")
        # L∆∞u quiz
        quiz_id = quiz_service.save_quiz(quiz_data)
        quiz_data['id'] = quiz_id
        
        print(f"‚úÖ Quiz created successfully with ID: {quiz_id}")
        return quiz_data
        
    except json.JSONDecodeError as e:
        print(f"‚ùå JSON Parse Error: {e}")
        raise HTTPException(status_code=500, detail=f"L·ªói parse JSON t·ª´ AI: {str(e)}")
    except Exception as e:
        print(f"‚ùå General Error: {e}")
        print(f"‚ùå Error type: {type(e)}")
        import traceback
        traceback.print_exc()
        raise HTTPException(status_code=500, detail=f"L·ªói t·∫°o c√¢u h·ªèi: {str(e)}")

# ===== IMAGE SEARCH ENDPOINTS =====

@app.post("/images/search")
async def search_images(request: ImageSearchRequest):
    """T√¨m ·∫£nh s·ª≠ d·ª•ng Google Custom Search API - ch·ªâ t·ª´ c√°c trang b√°o VN"""
    print(f"üñºÔ∏è Image search request: query='{request.query}', num_results={request.num_results}")
    
    try:
        print("üîß Step 1: Checking API keys...")
        api_key = os.getenv("GOOGLE_CSE_API_KEY")
        cse_id = os.getenv("GOOGLE_CSE_ID")
        
        print(f"üîß API Key: {api_key[:20]}..." if api_key else "‚ùå No API Key")
        print(f"üîß CSE ID: {cse_id}")
        
        if not api_key or not cse_id:
            print("‚ùå Missing Google CSE configuration")
            raise HTTPException(status_code=500, detail="Thi·∫øu c·∫•u h√¨nh Google CSE")
        
        print("üîß Step 2: Preparing Google CSE request...")
        # G·ªçi Google Custom Search API
        url = "https://www.googleapis.com/customsearch/v1"
        params = {
            'key': api_key,
            'cx': cse_id,
            'q': f"H·ªì Ch√≠ Minh {request.query}",
            'searchType': 'image',
            'num': min(request.num_results, 10),
            'safe': 'active',
            'imgType': 'photo'
        }
        
        print(f"üîß Step 3: Calling Google CSE API with params: {params}")
        response = requests.get(url, params=params)
        print(f"üîß Step 4: Response status: {response.status_code}")
        
        if response.status_code != 200:
            print(f"‚ùå Google CSE API error: {response.text}")
            raise HTTPException(status_code=500, detail=f"L·ªói g·ªçi Google CSE API: {response.status_code}")
        
        print("üîß Step 5: Parsing response...")
        data = response.json()
        print(f"üìù Response keys: {list(data.keys())}")
        print(f"üìù Total results info: {data.get('searchInformation', {})}")
        
        images = []
        items = data.get('items', [])
        print(f"üìù Found {len(items)} items")
        
        for i, item in enumerate(items):
            print(f"üìù Processing item {i+1}: {item.get('title', 'No title')}")
            images.append({
                'title': item.get('title', ''),
                'snippet': item.get('snippet', ''),
                'thumbnail': item.get('image', {}).get('thumbnailLink', ''),
                'original': item.get('link', ''),
                'source': item.get('displayLink', ''),
                'context': item.get('image', {}).get('contextLink', '')
            })
        
        print(f"‚úÖ Successfully processed {len(images)} images")
        return {
            'query': request.query,
            'total': len(images),
            'images': images
        }
        
    except Exception as e:
        print(f"‚ùå Image search error: {e}")
        print(f"‚ùå Error type: {type(e)}")
        import traceback
        traceback.print_exc()
        raise HTTPException(status_code=500, detail=f"L·ªói t√¨m ·∫£nh: {str(e)}")

@app.get("/quiz/{quiz_id}")
async def get_quiz(quiz_id: str):
    """L·∫•y n·ªôi dung quiz"""
    quiz_data = quiz_service.get_quiz(quiz_id)
    if not quiz_data:
        raise HTTPException(status_code=404, detail="Kh√¥ng t√¨m th·∫•y b√†i ki·ªÉm tra")
    return quiz_data

@app.post("/quiz/submit", response_model=QuizResultResponse)
async def submit_quiz(request: QuizSubmitRequest):
    """N·ªôp b√†i v√† t√≠nh ƒëi·ªÉm"""
    try:
        # L·∫•y quiz data
        quiz_data = quiz_service.get_quiz(request.quiz_id)
        if not quiz_data:
            raise HTTPException(status_code=404, detail="Kh√¥ng t√¨m th·∫•y b√†i ki·ªÉm tra")
        
        # T√≠nh ƒëi·ªÉm
        result = quiz_service.calculate_score(quiz_data, request.answers)
        
        # L∆∞u k·∫øt qu·∫£
        result_data = {
            **result,
            'quiz_title': quiz_data.get('title', ''),
            'quiz_chapter': quiz_data.get('chapter', '')
        }
        
        result_id = quiz_service.save_quiz_result(
            request.username,
            request.quiz_id,
            result_data
        )
        
        result['result_id'] = result_id
        return QuizResultResponse(**result)
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"L·ªói x·ª≠ l√Ω b√†i l√†m: {str(e)}")

@app.get("/quiz/history/{username}")
async def get_quiz_history(username: str, limit: Optional[int] = 10):
    """L·∫•y l·ªãch s·ª≠ l√†m b√†i c·ªßa user"""
    try:
        results = quiz_service.get_user_results(username, limit)
        return results
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"L·ªói l·∫•y l·ªãch s·ª≠: {str(e)}")

@app.get("/quiz/result/{username}/{result_id}")
async def get_quiz_result(username: str, result_id: str):
    """Xem chi ti·∫øt k·∫øt qu·∫£ b√†i l√†m"""
    result = quiz_service.get_result_detail(username, result_id)
    if not result:
        raise HTTPException(status_code=404, detail="Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£")
    return result

# ===== SERVER ENTRY POINT =====
if __name__ == "__main__":
    """
    Ch·∫°y server tr·ª±c ti·∫øp (cho development v√† production)
    Port s·∫Ω ƒë∆∞·ª£c l·∫•y t·ª´ environment variable PORT ho·∫∑c m·∫∑c ƒë·ªãnh 8000
    """
    import uvicorn
    port = int(os.environ.get("PORT", 8000))
    uvicorn.run(app, host="0.0.0.0", port=port)
